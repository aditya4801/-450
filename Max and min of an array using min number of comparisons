Naive approach

struct pair{
int min;
int max;
}

pair getminmax(int arr[],int n){
struct pair minmax;
int i;

if(n==1){
minmax.min=arr[0];
minmax.max=arr[0];
return minmax;
}

if(arr[1]>arr[0]){
minmax.max=arr[1];
minmax.min=arr[0];
}

else
minmax.min=arr[0];
minmax.max=arr[1];

for(i=2;i<n;i++)
if(arr[i]>minmax.max)
minmax.max=arr[i];
else if(arr[i]<minmax.min)
minmax.min=arr[i];}
return minmax;


Efficient approach

struct pair{
int min;
int max;}

struct pair getminmax(int arr[],int n)
{
struct pair minmax;
int i;
if(n%2==0){
if[arr[0]>arr[1]){
minmax.max=arr[0];
minmax.min=arr[1];
else{
minmax.max=arr[1];
minmax.min=arr[0];
}
i=2;}
else{

minmax.max=arr[0];
minmax.min=arr[0];
i=1;}

while(i<n-1){
if(arr[i]>minmax.max)
minmax.max=arr[i];

if(arr[i]<minmax.min)
minmax.min=arr[i];}

else{
if(arr[i+1]>minmax.max)
minmax.max=arr[i+1];

if(arr[i+1]<minmax.min)
minmax.min=arr[i+1];} 
i+=2;}
return minmax;
}
